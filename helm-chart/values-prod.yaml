# Production environment values
# Override default values for production deployment

# Multiple replicas for high availability
replicaCount: 3

image:
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

# Frontend configuration for production
frontend:
  replicaCount: 3
  image:
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70

# Backend configuration for production
backend:
  replicaCount: 3
  image:
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
  env:
    NODE_ENV: production
    PORT: "3001"
    FRONTEND_URL: https://calendar-todo.example.com

# PostgreSQL configuration for production
postgresql:
  enabled: true
  auth:
    # Use strong passwords in production - should be provided via secrets
    postgresPassword: ""  # Should be set via --set or external secret
    username: "todouser"
    password: ""  # Should be set via --set or external secret
    database: "todoapp_prod"
    existingSecret: "calendar-todo-db-secret"  # Use external secret
  primary:
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 50Gi
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# External database configuration (alternative to bundled PostgreSQL)
# externalDatabase:
#   host: "postgres-prod.example.com"
#   port: 5432
#   username: "todouser"
#   password: ""  # Should be provided via secret
#   database: "todoapp_prod"
#   existingSecret: "external-db-secret"
#   existingSecretPasswordKey: "password"

# JWT configuration for production
jwt:
  # Use external secrets in production
  existingSecret: "calendar-todo-jwt-secret"
  secretKey: "jwt-secret"
  refreshSecretKey: "jwt-refresh-secret"

# Ingress configuration for production
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
  hosts:
    - host: calendar-todo.example.com
      paths:
        - path: /
          pathType: Prefix
          backend: frontend
        - path: /api
          pathType: Prefix
          backend: backend
  tls:
    - secretName: calendar-todo-tls
      hosts:
        - calendar-todo.example.com

# Database migration for production
dbMigration:
  enabled: true
  image:
    tag: "v1.0.0"
  backoffLimit: 3

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: "monitoring"
    labels:
      app: calendar-todo

# Security context for production
podSecurityContext:
  fsGroup: 1001
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
      - ALL

# Node affinity for production workloads
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - calendar-todo
          topologyKey: kubernetes.io/hostname